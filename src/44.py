#encoding=utf-8

'''
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, 
for which their sum and difference is pentagonal and D = |Pk − Pj| is minimised; 
what is the value of D?
'''

import time,math

def p(n):
    return n*(3*n-1)/2

def is_pentagonal(p):
    t = 1 + 24*p
    r = int(math.sqrt(t))
    if r*r == t:
        return ((1+r)%6) == 0
    return False

def n_pentagonal(p):
    t = 1 + 24*p
    r = math.sqrt(t)
    return int((1+r)/6)

def solve():
    global k
    k = read_sav() #already verified <10000
    print 'start from %d' % k
    while True:
        d = p(k)
        if check(d):
            return d
        k = k + 1
        if (k % 1000) == 0:
            print 'reached %d' % k
            save_progress(k)

def check(k):
    t = 1
    dp = 2*k + t - 3*t*t
    dm = 6*t
    while dp >= dm:
        if dp % dm == 0:
            n = dp / dm
            if is_pentagonal(p(n)+p(n+t)):
                print 'p(%d) - p(%d) = p(%d)' % (n+t, n, n_pentagonal(k))
                print 'p(%d) + p(%d) = p(%d)' % (n+t, n, n_pentagonal(p(n)+p(n+t)))
                return True
        t = t + 1
        dp = 2*k + t - 3*t*t
        dm = 6*t
    return False

def save_progress(k):
    f = open('p44.sav', 'w')
    f.write(str(k))
    f.close()

def read_sav():
    try:
        f = open('p44.sav')
        s = f.read()
        f.close()
        return int(s)
    except IOError:
        return 1

def test():
    assert is_pentagonal(1)
    assert is_pentagonal(5)
    assert is_pentagonal(145)

if __name__ == "__main__":
    test()
    t = time.time()
    try:
        print "answer = %s" % (solve())
    except KeyboardInterrupt:
        print "reached %d" % k
#        save_progress(k)
    print "(%s)" % (time.time() - t)
